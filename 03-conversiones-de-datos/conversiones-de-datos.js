// CONVERSIONES DE TIPO EN JAVASCRIPT

// üî∏ 1. CONVERSI√ìN IMPL√çCITA (Coerci√≥n)
// Ocurre autom√°ticamente cuando JavaScript intenta convertir tipos diferentes para operar

// ‚ûï Suma de n√∫mero y string ‚Üí el n√∫mero se convierte a string
let resultado1 = 5 + "10"; // "510" (n√∫mero 5 se convierte en string)
console.log("Resultado 1 (5 + '10'):", resultado1);

// ‚ûñ Resta de string y n√∫mero ‚Üí el string se convierte a n√∫mero
let resultado2 = "10" - 2; // 8
console.log("Resultado 2 ('10' - 2):", resultado2);

// ‚úñÔ∏è Multiplicaci√≥n de strings num√©ricos
let resultado3 = "4" * "2"; // 8
console.log("Resultado 3 ('4' * '2'):", resultado3);

// ‚ùó Comparaciones flexibles (==) ‚Üí tambi√©n hacen conversi√≥n impl√≠cita
console.log("Resultado 4 (false == 0):", false == 0); // true
console.log("Resultado 5 ('' == 0):", "" == 0); // true

// ‚ö†Ô∏è Estas conversiones pueden causar confusi√≥n. Se recomienda usar ===

// üî∏ 2. CONVERSI√ìN EXPL√çCITA (CASTING)
// Usamos funciones o m√©todos para convertir tipos manualmente

// ‚úÖ String a N√∫mero
let cadena = "123";
let numero1 = Number(cadena); // 123 (como n√∫mero)
let numero2 = parseInt(cadena); // 123 (entero)
let numero3 = parseFloat("123.45"); // 123.45

console.log("String a Number:", numero1);
console.log("parseInt:", numero2);
console.log("parseFloat:", numero3);

// ‚úÖ N√∫mero a String
let num = 456;
let texto1 = String(num); // "456"
let texto2 = num.toString(); // "456"

console.log("N√∫mero a String:", texto1);
console.log("toString:", texto2);

// ‚úÖ Booleanos
console.log("Boolean(Number(0)):", Boolean(Number(0))); // false
console.log("Boolean('Hola'):", Boolean("Hola")); // true
console.log("Boolean(''):", Boolean("")); // false
console.log("Boolean(null):", Boolean(null)); // false

// ‚úÖ Conversi√≥n r√°pida con operador +
let rapido = +"42"; // convierte string a n√∫mero
console.log("Conversi√≥n r√°pida con +:", rapido);

// ‚úÖ Con doble negaci√≥n (!!) para convertir a booleano
let valor = "algo";
console.log("Boolean con !!:", !!valor); // true

// ‚ö†Ô∏è Usar conversi√≥n expl√≠cita siempre que sea posible para evitar errores inesperados

// M√âTODO toFixed() EN JAVASCRIPT
// Se usa para limitar la cantidad de decimales de un n√∫mero

const numero = 12.34567;

// üîπ Limitar a 2 decimales
const conDosDecimales = numero.toFixed(2); // "12.35"
console.log("Con 2 decimales:", conDosDecimales);

// üîπ Limitar a 0 decimales (redondea)
console.log("Redondeado sin decimales:", numero.toFixed(0)); // "12"

// üîπ El resultado es un STRING
console.log("Tipo de resultado:", typeof conDosDecimales); // string

// üîπ Convertir de nuevo a n√∫mero (si se necesita operar)
const comoNumero = parseFloat(conDosDecimales) + 1;
console.log("Suma +1:", comoNumero);

// üîπ Usos comunes: mostrar precios, porcentajes, etc.
let precio = 19.999;
console.log("Precio:", precio.toFixed(2)); // "20.00"

// üîπ ¬°Cuidado! Redondea, no solo recorta
console.log((2.005).toFixed(2)); // "2.01" (redondea hacia arriba)
